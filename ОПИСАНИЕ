Описание проекта:
Разработал backend-часть веб-приложения для управления данными медицинской клиники. Проект предоставляет RESTful API для работы с основными сущностями (пациенты, врачи, записи на прием, отделения, услуги) и поддерживает сбор аналитической статистики.

Само собой, есть фронт, но там еще меньше интересного. Кода нет, описание ниже.
Технологии и инструменты:

Язык: Java 17

Фреймворки: Spring Boot 3.3.5, Spring Data JPA, Lombok

База данных: MySQL

Сборка: Maven

Реализованный функционал:

- CRUD-операции для сущностей:

- Управление пациентами (Patient), врачами (Doctor), записями на прием (Appointment), отделениями (Department) и услугами (Services).

- Репозитории (*Repository) для взаимодействия с базой данных.

Статистика:

- Анализ загруженности врачей (BusyDaysStats, BusyHoursStats).

- Финансовая статистика (IncomeStats).

- Отслеживание новых пациентов (NewPatientsStats).

- Статистика по комбинациям услуг (ServiceCombinationStats).

Структура проекта:

- Четкое разделение на слои: контроллеры (*Controller), сервисы (*Service), репозитории (*Repository), DTO.

- Использование Lombok для сокращения boilerplate-кода.



ФРОНТ
Описание проекта:
Разработал SPA-интерфейс для взаимодействия с API бэкенда клиники. Фронтенд реализован на Vue 3 с использованием Composition API и Vue Router для навигации между разделами.

Технологии и инструменты:

Языки: TypeScript, CSS

Фреймворки: Vue 3, Vue Router

Сборка: Vite

Дополнительно: Single-File Components (SFC)

Реализованный функционал:

Модули интерфейса:

- Просмотр и управление записями на прием (Appointments.vue).

- Управление данными отделений (Departments.vue), врачей (Doctors.vue), пациентов (Patients.vue) и услуг (Services.vue).

- Аналитическая панель (StatisticsPage.vue) для визуализации статистики с бэкенда.

- Главная страница (ClinicPage.vue).

Роутинг:

- Настроена навигация между разделами через Vue Router (router/index.ts).

Структура проекта:

- Компонентный подход (папка components/).

- Глобальные стили (style.css).

- Работа с TypeScript (типизация, файлы *.d.ts).

Интеграция с бэкендом:

- Отправка HTTP-запросов к API (Axios/Fetch) для CRUD-операций.

- Отображение данных, полученных из бэкенда (например, статистики).


